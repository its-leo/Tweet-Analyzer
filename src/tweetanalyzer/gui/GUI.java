/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tweetanalyzer.gui;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import tweetanalyzer.store.FileHandler;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.xml.bind.JAXBException;
import static tweetanalyzer.Main.DEBUG;
import tweetanalyzer.store.Location;
import tweetanalyzer.analyze.NLP;
import tweetanalyzer.search.TweetManager;
import tweetanalyzer.store.Database;
import tweetanalyzer.store.Tweet;
import tweetanalyzer.visualize.DateChart.DateChart;
import tweetanalyzer.visualize.SingleLineChart.SingleLineChart;
import tweetanalyzer.visualize.HeatMap.HeatMapBuilder;
import tweetanalyzer.visualize.WordCloud.WordCloudBuilder;

/**
 *
 * @author HENSEL
 */
public class GUI extends javax.swing.JFrame {

    private static final DateFormat df = new SimpleDateFormat("E. dd.MM.yy HH:mm:ss");
    private static final DecimalFormat nf = new DecimalFormat();

    private boolean stageSearch = false;
    private boolean stageAnalyze = false;

    private String lang;

    private Database db = new Database();

    private Thread mainThread;
    private Timer mainTimer;

    /**
     * Creates new form GUI
     */
    public GUI(String lang) {
        this.lang = lang;
        db.setLang(lang);

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        sidePanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        countLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 50), new java.awt.Dimension(0, 50), new java.awt.Dimension(32767, 50));
        infoButton = new javax.swing.JButton();
        settingsButton = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(55, 0), new java.awt.Dimension(55, 0), new java.awt.Dimension(60, 32767));
        statisticButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        subdivideButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        importButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel4.setVisible(false);
        filterLine = new javax.swing.JSeparator();
        filterField = new javax.swing.JTextField();
        filterField.setFocusable(false);             filterField.setFocusable(true);
        clearFilterButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        searchPanel = new javax.swing.JPanel();
        searchButtonPanel = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        SearchFieldLabel = new javax.swing.JPanel();
        keywordField = new javax.swing.JTextField();
        searchFieldUnderline = new javax.swing.JSeparator();
        searchLabel = new javax.swing.JLabel();
        contentPanel = new javax.swing.JPanel();
        jFileChooser = new javax.swing.JFileChooser();
        middlePanel = new javax.swing.JPanel();
        resultScrollPane = new javax.swing.JScrollPane();
        resultScrollPane.setVisible(false);
        resultTable = new javax.swing.JTable();
        searchProgressBar = new javax.swing.JProgressBar();
        linkButton = new javax.swing.JButton();
        bottomPanel = new javax.swing.JPanel();
        analyzePanel = new javax.swing.JPanel();
        analyzeProgressBar = new javax.swing.JProgressBar();
        jPanel2 = new javax.swing.JPanel();
        analyzeButton = new javax.swing.JButton();
        resumeButton = new javax.swing.JButton();
        suspendButton = new javax.swing.JButton();
        focusCheckBox = new javax.swing.JCheckBox();
        analyzeResultPanel = new java.awt.Panel();
        analyzedCount = new javax.swing.JLabel();
        sentimentSmiley = new javax.swing.JLabel();
        visualizeProgressBar = new javax.swing.JProgressBar();
        visualizePanel = new javax.swing.JPanel();
        visualizeButton = new javax.swing.JButton();
        chartButton = new javax.swing.JButton();
        wordCloudButton = new javax.swing.JButton();
        jSeparator = new javax.swing.JSeparator();
        jSeparator.setVisible(false);
        mapPanel = new javax.swing.JPanel();
        mapButton = new javax.swing.JButton();
        mapWarningButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("#Twitter-Datenanalyse");
        setBackground(new java.awt.Color(204, 204, 204));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(new ImageIcon(getClass().getResource("/resources/icons/icons8-Search Property-32.png")).getImage());
        setMinimumSize(new java.awt.Dimension(990, 684));

        sidePanel.setBackground(new java.awt.Color(0, 18, 50));
        sidePanel.setAlignmentX(0.0F);
        sidePanel.setAlignmentY(0.0F);
        sidePanel.setMinimumSize(new java.awt.Dimension(200, 424));
        sidePanel.setPreferredSize(new java.awt.Dimension(240, 424));
        sidePanel.setLayout(new java.awt.BorderLayout());

        jPanel5.setBackground(new java.awt.Color(0, 25, 71));
        jPanel5.setMinimumSize(new java.awt.Dimension(60, 60));
        jPanel5.setOpaque(false);
        jPanel5.setPreferredSize(new java.awt.Dimension(60, 60));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        statusLabel.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        statusLabel.setForeground(new java.awt.Color(255, 255, 255));
        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statusLabel.setFocusable(false);
        statusLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel5.add(statusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 240, 30));

        countLabel.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        countLabel.setForeground(new java.awt.Color(255, 255, 255));
        countLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        countLabel.setFocusable(false);
        countLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel5.add(countLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 240, 30));

        sidePanel.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jPanel3.setBackground(new java.awt.Color(0, 11, 30));
        jPanel3.setMaximumSize(new java.awt.Dimension(32767, 60));
        jPanel3.setMinimumSize(new java.awt.Dimension(200, 60));
        jPanel3.setPreferredSize(new java.awt.Dimension(200, 60));
        jPanel3.add(filler1);

        infoButton.setBackground(new java.awt.Color(237, 237, 237));
        infoButton.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        infoButton.setForeground(new java.awt.Color(0, 18, 50));
        infoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Info Squared-32(2).png"))); // NOI18N
        infoButton.setToolTipText("Anwendungsinformationen einsehen");
        infoButton.setBorder(null);
        infoButton.setContentAreaFilled(false);
        infoButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        infoButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        infoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButtonActionPerformed(evt);
            }
        });
        jPanel3.add(infoButton);

        settingsButton.setFont(new java.awt.Font("Segoe UI Light", 0, 22)); // NOI18N
        settingsButton.setForeground(new java.awt.Color(255, 255, 255));
        settingsButton.setToolTipText("Sprache umstellen");
        settingsButton.setBorder(null);
        settingsButton.setContentAreaFilled(false);
        settingsButton.setFocusable(false);
        settingsButton.setText(db.getLang().toUpperCase());
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });
        jPanel3.add(settingsButton);
        jPanel3.add(filler2);

        statisticButton.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        statisticButton.setForeground(new java.awt.Color(255, 255, 255));
        statisticButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Line Chart-28.png"))); // NOI18N
        statisticButton.setToolTipText("Häufigkeiten der Tweets einsehen");
        statisticButton.setBorder(null);
        statisticButton.setContentAreaFilled(false);
        statisticButton.setFocusable(false);
        statisticButton.setVisible(false);
        statisticButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statisticButtonActionPerformed(evt);
            }
        });
        jPanel3.add(statisticButton);

        sidePanel.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        subdivideButton.setBackground(new java.awt.Color(13, 37, 86));
        subdivideButton.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        subdivideButton.setForeground(new java.awt.Color(255, 255, 255));
        subdivideButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Split Cells-32(1).png"))); // NOI18N
        subdivideButton.setText("Unterteilen");
        subdivideButton.setToolTipText("Entfernt alle herausgefilterten Tweets aus der lokalen Datenbank");
        subdivideButton.setAlignmentX(0.5F);
        subdivideButton.setContentAreaFilled(false);
        subdivideButton.setFocusable(false);
        subdivideButton.setMargin(new java.awt.Insets(2, 5, 8, 5));
        subdivideButton.setOpaque(true);
        subdivideButton.setVisible(false);
        subdivideButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subdivideButtonActionPerformed(evt);
            }
        });
        jPanel1.add(subdivideButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 240, 60));

        updateButton.setBackground(new java.awt.Color(13, 37, 86));
        updateButton.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Download-32.png"))); // NOI18N
        updateButton.setText("Aktualisieren");
        updateButton.setToolTipText("Neue Tweets einholen und Datenbank ergänzen");
        updateButton.setAlignmentX(0.5F);
        updateButton.setContentAreaFilled(false);
        updateButton.setFocusable(false);
        updateButton.setMargin(new java.awt.Insets(2, 5, 8, 5));
        updateButton.setOpaque(true);
        updateButton.setVisible(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel1.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 240, 60));

        resetButton.setBackground(new java.awt.Color(13, 37, 86));
        resetButton.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        resetButton.setForeground(new java.awt.Color(255, 255, 255));
        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Reset-32.png"))); // NOI18N
        resetButton.setText("Zurücksetzen");
        resetButton.setToolTipText("Anwendung mitsamt Datenbank zurücksetzen");
        resetButton.setAlignmentX(0.5F);
        resetButton.setContentAreaFilled(false);
        resetButton.setFocusable(false);
        resetButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        resetButton.setMargin(new java.awt.Insets(2, 5, 10, 5));
        resetButton.setOpaque(true);
        resetButton.setVisible(false);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        jPanel1.add(resetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 470, 240, 60));

        importButton.setBackground(new java.awt.Color(13, 37, 86));
        importButton.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        importButton.setForeground(new java.awt.Color(255, 255, 255));
        importButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Export-32.png"))); // NOI18N
        importButton.setText("Importieren");
        importButton.setToolTipText("Datenbank einer XML-Datei importieren");
        importButton.setAlignmentX(0.5F);
        importButton.setContentAreaFilled(false);
        importButton.setFocusable(false);
        importButton.setMargin(new java.awt.Insets(2, 5, 8, 5));
        importButton.setOpaque(true);
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });
        jPanel1.add(importButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 240, 60));

        exportButton.setBackground(new java.awt.Color(13, 37, 86));
        exportButton.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        exportButton.setForeground(new java.awt.Color(255, 255, 255));
        exportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Import-32.png"))); // NOI18N
        exportButton.setText("Exportieren");
        exportButton.setToolTipText("Datenbank in XML-Datei exportieren");
        exportButton.setAlignmentX(0.5F);
        exportButton.setContentAreaFilled(false);
        exportButton.setFocusable(false);
        exportButton.setMargin(new java.awt.Insets(2, 5, 8, 5));
        exportButton.setOpaque(true);
        exportButton.setVisible(false);
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });
        jPanel1.add(exportButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 240, 60));

        jPanel4.setBackground(new java.awt.Color(13, 37, 86));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        filterLine.setVisible(false);
        jPanel4.add(filterLine, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 130, -1));

        filterField.setBackground(new java.awt.Color(0, 18, 50));
        filterField.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        filterField.setForeground(new java.awt.Color(255, 255, 255));
        filterField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        filterField.setText("Filtern");
        filterField.setToolTipText("<html>\nFILTER1 , FILTER2 = Vereinigungsmenge\n<br>\n<font color=blue>\nFILTER1 & FILTER2 = Schnittmenge\n</font>\n<br>\n\n<font color=purple>\n-FILTER = Filter negieren\n</font>\n<br>\n<font color=red>\n!FiLTeR = Groß-/Kleinschreibung beachten\n</font>\n\n<br>\n<font color=orange>\n>FILTER< = Ort, Schlagwort, Organisation filtern\n</font>\n\n</html>\n\n\n\n</font>");
        filterField.setBorder(null);
        filterField.setCaretColor(new java.awt.Color(255, 255, 255));
        filterField.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        filterField.setOpaque(false);
        filterField.setScrollOffset(1);
        filterField.setSelectedTextColor(new java.awt.Color(153, 153, 153));
        filterField.setSelectionColor(new java.awt.Color(255, 255, 255));
        filterField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                filterFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                filterFieldFocusLost(evt);
            }
        });
        filterField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                filterFieldMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                filterFieldMouseExited(evt);
            }
        });
        filterField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filterFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterFieldKeyReleased(evt);
            }
        });
        jPanel4.add(filterField, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 17, 140, -1));

        clearFilterButton.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        clearFilterButton.setForeground(new java.awt.Color(255, 255, 255));
        clearFilterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Clear Filters-32.png"))); // NOI18N
        clearFilterButton.setToolTipText("Filter entfernen");
        clearFilterButton.setAlignmentX(0.5F);
        clearFilterButton.setContentAreaFilled(false);
        clearFilterButton.setFocusable(false);
        clearFilterButton.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        clearFilterButton.setMargin(new java.awt.Insets(2, 5, 8, 5));
        clearFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFilterButtonActionPerformed(evt);
            }
        });
        jPanel4.add(clearFilterButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 60));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 240, 60));

        sidePanel.add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(sidePanel, java.awt.BorderLayout.LINE_START);

        mainPanel.setBackground(new java.awt.Color(204, 204, 204));
        mainPanel.setAlignmentX(0.0F);
        mainPanel.setAlignmentY(0.0F);
        mainPanel.setPreferredSize(new java.awt.Dimension(630, 650));
        mainPanel.setLayout(new java.awt.BorderLayout());

        searchPanel.setBackground(new java.awt.Color(255, 255, 255));
        searchPanel.setAlignmentX(0.0F);
        searchPanel.setAlignmentY(0.0F);
        searchPanel.setFocusable(false);
        searchPanel.setPreferredSize(new java.awt.Dimension(914, 60));
        searchPanel.setRequestFocusEnabled(false);
        searchPanel.setVerifyInputWhenFocusTarget(false);
        searchPanel.setLayout(new java.awt.BorderLayout());

        searchButtonPanel.setBackground(new java.awt.Color(255, 255, 255));
        searchButtonPanel.setPreferredSize(new java.awt.Dimension(100, 60));

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Search-32.png"))); // NOI18N
        searchButton.setToolTipText("Suchen");
        searchButton.setBorderPainted(false);
        searchButton.setContentAreaFilled(false);
        searchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        searchButton.setFocusable(false);
        searchButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        searchButton.setMinimumSize(new java.awt.Dimension(97, 73));
        searchButton.setPreferredSize(new java.awt.Dimension(60, 50));
        searchButton.setVisible(false);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        searchButtonPanel.add(searchButton);

        SearchFieldLabel.setAlignmentX(0.0F);
        SearchFieldLabel.setAlignmentY(0.0F);
        SearchFieldLabel.setOpaque(false);
        SearchFieldLabel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        keywordField.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        keywordField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        keywordField.setBorder(null);
        keywordField.setMinimumSize(new java.awt.Dimension(6, 10));
        keywordField.setOpaque(false);
        keywordField.setPreferredSize(new java.awt.Dimension(59, 10));
        keywordField.setVisible(false);
        keywordField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                keywordFieldMouseExited(evt);
            }
        });
        keywordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keywordFieldActionPerformed(evt);
            }
        });
        keywordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                keywordFieldKeyPressed(evt);
            }
        });
        SearchFieldLabel.add(keywordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 620, 48));

        searchFieldUnderline.setOpaque(true);
        searchFieldUnderline.setPreferredSize(new java.awt.Dimension(620, 2));
        searchFieldUnderline.setVisible(false);
        SearchFieldLabel.add(searchFieldUnderline, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 38, -1, -1));

        searchLabel.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        searchLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        searchLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Search-32.png"))); // NOI18N
        searchLabel.setText("Suchen");
        searchLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchLabelMouseEntered(evt);
            }
        });
        SearchFieldLabel.add(searchLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(-16, 7, 670, -1));

        searchButtonPanel.add(SearchFieldLabel);

        searchPanel.add(searchButtonPanel, java.awt.BorderLayout.CENTER);

        mainPanel.add(searchPanel, java.awt.BorderLayout.NORTH);

        contentPanel.setBackground(new java.awt.Color(204, 204, 204));
        contentPanel.setLayout(new java.awt.BorderLayout());

        jFileChooser.setAcceptAllFileFilterUsed(false);
        jFileChooser.setCurrentDirectory(new java.io.File("C:\\Users\\HENSEL\\Desktop"));
        jFileChooser.setFileFilter(new FileNameExtensionFilter("XML Datei", "xml"));
        contentPanel.add(jFileChooser, java.awt.BorderLayout.CENTER);

        middlePanel.setBackground(new java.awt.Color(204, 204, 204));
        middlePanel.setLayout(new java.awt.BorderLayout());

        resultScrollPane.setBackground(new java.awt.Color(196, 196, 196));
        resultScrollPane.setBorder(null);

        resultTable.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Datum", "Benutzer", "Tweet"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

        });
        resultTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        resultTable.setGridColor(new java.awt.Color(245, 245, 245));
        resultTable.setOpaque(false);
        resultTable.setRowHeight(25);
        resultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultTable.setShowHorizontalLines(false);
        resultTable.getTableHeader().setFont(new java.awt.Font("Segoe UI Light", 0, 18));
        //resultTable.getTableHeader().setBackground(new java.awt.Color(196,196,196));
        //resultTable.getTableHeader().setForeground(new java.awt.Color(255,255,255));

        resultTable.getColumnModel().getColumn(0).setMaxWidth(265);
        resultTable.getColumnModel().getColumn(1).setMaxWidth(150);
        //
        resultTable.getColumnModel().getColumn(0).setMinWidth(170);
        resultTable.getColumnModel().getColumn(1).setMinWidth(150);
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultTableMouseClicked(evt);
            }
        });
        resultScrollPane.setViewportView(resultTable);

        middlePanel.add(resultScrollPane, java.awt.BorderLayout.CENTER);

        searchProgressBar.setBackground(new java.awt.Color(255, 255, 255));
        searchProgressBar.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        searchProgressBar.setForeground(new java.awt.Color(255, 255, 255));
        searchProgressBar.setToolTipText("");
        searchProgressBar.setFocusable(false);
        searchProgressBar.setIndeterminate(true);
        searchProgressBar.setMaximumSize(new java.awt.Dimension(32767, 60));
        searchProgressBar.setMinimumSize(new java.awt.Dimension(10, 20));
        searchProgressBar.setOpaque(true);
        searchProgressBar.setPreferredSize(new java.awt.Dimension(146, 20));
        searchProgressBar.setVisible(false);
        middlePanel.add(searchProgressBar, java.awt.BorderLayout.PAGE_START);

        linkButton.setBackground(new java.awt.Color(204, 204, 204));
        linkButton.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        linkButton.setForeground(new java.awt.Color(51, 51, 51));
        linkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-External Link-32(2).png"))); // NOI18N
        linkButton.setToolTipText("");
        linkButton.setContentAreaFilled(false);
        linkButton.setOpaque(true);
        linkButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                linkButtonFocusLost(evt);
            }
        });
        linkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkButtonActionPerformed(evt);
            }
        });
        linkButton.setVisible(false);
        middlePanel.add(linkButton, java.awt.BorderLayout.PAGE_END);

        contentPanel.add(middlePanel, java.awt.BorderLayout.CENTER);

        bottomPanel.setBackground(new java.awt.Color(0, 51, 51));
        bottomPanel.setPreferredSize(new java.awt.Dimension(746, 200));
        bottomPanel.setLayout(new java.awt.BorderLayout());

        analyzePanel.setBackground(new java.awt.Color(0, 51, 51));
        analyzePanel.setPreferredSize(new java.awt.Dimension(256, 60));
        analyzePanel.setRequestFocusEnabled(false);
        analyzePanel.setLayout(new java.awt.BorderLayout());

        analyzeProgressBar.setBackground(new java.awt.Color(255, 255, 255));
        analyzeProgressBar.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        analyzeProgressBar.setForeground(new java.awt.Color(0, 183, 0));
        analyzeProgressBar.setBorderPainted(false);
        analyzeProgressBar.setFocusable(false);
        analyzeProgressBar.setMaximumSize(new java.awt.Dimension(32767, 20));
        analyzeProgressBar.setMinimumSize(new java.awt.Dimension(10, 20));
        analyzeProgressBar.setPreferredSize(new java.awt.Dimension(146, 20));
        analyzeProgressBar.setStringPainted(true);
        analyzeProgressBar.setVisible(false);
        analyzePanel.add(analyzeProgressBar, java.awt.BorderLayout.PAGE_START);

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));

        analyzeButton.setBackground(new java.awt.Color(0, 51, 51));
        analyzeButton.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        analyzeButton.setForeground(new java.awt.Color(255, 255, 255));
        analyzeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Analyze-32(1).png"))); // NOI18N
        analyzeButton.setText("Auswerten");
        analyzeButton.setContentAreaFilled(false);
        analyzeButton.setEnabled(false);
        analyzeButton.setFocusable(false);
        analyzeButton.setMaximumSize(new java.awt.Dimension(183, 60));
        analyzeButton.setMinimumSize(new java.awt.Dimension(183, 60));
        analyzeButton.setPreferredSize(new java.awt.Dimension(183, 60));
        analyzeButton.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        analyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeButtonActionPerformed(evt);
            }
        });
        jPanel2.add(analyzeButton);

        resumeButton.setBackground(new java.awt.Color(0, 51, 51));
        resumeButton.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        resumeButton.setForeground(new java.awt.Color(255, 255, 255));
        resumeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Play-32.png"))); // NOI18N
        resumeButton.setText("Fortsetzen");
        resumeButton.setContentAreaFilled(false);
        resumeButton.setFocusable(false);
        resumeButton.setMaximumSize(new java.awt.Dimension(183, 60));
        resumeButton.setMinimumSize(new java.awt.Dimension(183, 60));
        resumeButton.setPreferredSize(new java.awt.Dimension(183, 60));
        resumeButton.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        resumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeButtonActionPerformed(evt);
            }
        });
        resumeButton.setVisible(false);
        jPanel2.add(resumeButton);

        suspendButton.setBackground(new java.awt.Color(0, 51, 51));
        suspendButton.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        suspendButton.setForeground(new java.awt.Color(255, 255, 255));
        suspendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Pause-32.png"))); // NOI18N
        suspendButton.setText("Pausieren");
        suspendButton.setContentAreaFilled(false);
        suspendButton.setFocusable(false);
        suspendButton.setMaximumSize(new java.awt.Dimension(183, 60));
        suspendButton.setMinimumSize(new java.awt.Dimension(183, 60));
        suspendButton.setPreferredSize(new java.awt.Dimension(183, 60));
        suspendButton.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        suspendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suspendButtonActionPerformed(evt);
            }
        });
        suspendButton.setVisible(false);
        jPanel2.add(suspendButton);

        focusCheckBox.setSelected(true);
        focusCheckBox.setToolTipText("Auswertungsverlauf in Echtzeit verfolgen");
        focusCheckBox.setBorder(null);
        focusCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        focusCheckBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-UnTarget-32.png"))); // NOI18N
        focusCheckBox.setMargin(new java.awt.Insets(4, 4, 4, 4));
        focusCheckBox.setMaximumSize(new java.awt.Dimension(40, 50));
        focusCheckBox.setMinimumSize(new java.awt.Dimension(40, 50));
        focusCheckBox.setOpaque(false);
        focusCheckBox.setPreferredSize(new java.awt.Dimension(40, 50));
        focusCheckBox.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Target-32_1.png"))); // NOI18N
        focusCheckBox.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        focusCheckBox.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        focusCheckBox.setVisible(false);
        jPanel2.add(focusCheckBox);

        analyzePanel.add(jPanel2, java.awt.BorderLayout.CENTER);

        bottomPanel.add(analyzePanel, java.awt.BorderLayout.NORTH);

        analyzeResultPanel.setBackground(new java.awt.Color(0, 51, 51));
        analyzeResultPanel.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        analyzeResultPanel.setForeground(new java.awt.Color(255, 255, 255));
        analyzeResultPanel.setLayout(new java.awt.BorderLayout());

        analyzedCount.setFont(new java.awt.Font("Segoe UI Light", 0, 20)); // NOI18N
        analyzedCount.setForeground(new java.awt.Color(255, 255, 255));
        analyzedCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        analyzedCount.setToolTipText("");
        analyzedCount.setMaximumSize(new java.awt.Dimension(200, 32));
        analyzedCount.setMinimumSize(new java.awt.Dimension(150, 32));
        analyzedCount.setPreferredSize(new java.awt.Dimension(150, 32));
        analyzeResultPanel.add(analyzedCount, java.awt.BorderLayout.NORTH);

        sentimentSmiley.setBackground(new java.awt.Color(0, 0, 0));
        sentimentSmiley.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        sentimentSmiley.setForeground(new java.awt.Color(255, 255, 255));
        sentimentSmiley.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sentimentSmiley.setMaximumSize(new java.awt.Dimension(240, 32));
        sentimentSmiley.setMinimumSize(new java.awt.Dimension(240, 32));
        sentimentSmiley.setPreferredSize(new java.awt.Dimension(240, 32));
        analyzeResultPanel.add(sentimentSmiley, java.awt.BorderLayout.CENTER);

        visualizeProgressBar.setBackground(new java.awt.Color(255, 255, 255));
        visualizeProgressBar.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        visualizeProgressBar.setForeground(new java.awt.Color(255, 255, 255));
        visualizeProgressBar.setBorderPainted(false);
        visualizeProgressBar.setMinimumSize(new java.awt.Dimension(10, 20));
        visualizeProgressBar.setPreferredSize(new java.awt.Dimension(146, 20));
        visualizeProgressBar.setStringPainted(true);
        visualizeProgressBar.setVisible(false);
        analyzeResultPanel.add(visualizeProgressBar, java.awt.BorderLayout.SOUTH);

        bottomPanel.add(analyzeResultPanel, java.awt.BorderLayout.CENTER);

        visualizePanel.setBackground(new java.awt.Color(51, 51, 51));
        visualizePanel.setMaximumSize(new java.awt.Dimension(2147483647, 60));
        visualizePanel.setMinimumSize(new java.awt.Dimension(643, 60));
        visualizePanel.setPreferredSize(new java.awt.Dimension(643, 60));

        visualizeButton.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        visualizeButton.setForeground(new java.awt.Color(255, 255, 255));
        visualizeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Monitor-32.png"))); // NOI18N
        visualizeButton.setText("Visualisieren");
        visualizeButton.setContentAreaFilled(false);
        visualizeButton.setEnabled(false);
        visualizeButton.setFocusable(false);
        visualizeButton.setMaximumSize(new java.awt.Dimension(700, 41));
        visualizeButton.setMinimumSize(new java.awt.Dimension(700, 41));
        visualizeButton.setPreferredSize(new java.awt.Dimension(700, 41));
        visualizeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                visualizeButtonMouseEntered(evt);
            }
        });
        visualizePanel.add(visualizeButton);

        chartButton.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        chartButton.setForeground(new java.awt.Color(255, 255, 255));
        chartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Bar Chart-32.png"))); // NOI18N
        chartButton.setText("Diagramm");
        chartButton.setContentAreaFilled(false);
        chartButton.setFocusable(false);
        chartButton.setVisible(false);
        chartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartButtonActionPerformed(evt);
            }
        });
        visualizePanel.add(chartButton);

        wordCloudButton.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        wordCloudButton.setForeground(new java.awt.Color(255, 255, 255));
        wordCloudButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Cloud-32(1).png"))); // NOI18N
        wordCloudButton.setText("TagCloud");
        wordCloudButton.setContentAreaFilled(false);
        wordCloudButton.setFocusable(false);
        wordCloudButton.setVisible(false);
        wordCloudButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordCloudButtonActionPerformed(evt);
            }
        });
        visualizePanel.add(wordCloudButton);

        jSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator.setPreferredSize(new java.awt.Dimension(2, 41));
        visualizePanel.add(jSeparator);

        mapPanel.setMinimumSize(new java.awt.Dimension(212, 41));
        mapPanel.setOpaque(false);
        mapPanel.setPreferredSize(new java.awt.Dimension(180, 41));
        mapPanel.setVisible(false);
        mapPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mapButton.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        mapButton.setForeground(new java.awt.Color(255, 255, 255));
        mapButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-World Map-32.png"))); // NOI18N
        mapButton.setText("HeatMap");
        mapButton.setContentAreaFilled(false);
        mapButton.setFocusable(false);
        mapButton.setMargin(new java.awt.Insets(2, 0, 2, 0));
        mapButton.setMaximumSize(new java.awt.Dimension(133, 45));
        mapButton.setMinimumSize(new java.awt.Dimension(133, 45));
        mapButton.setPreferredSize(new java.awt.Dimension(133, 40));
        mapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapButtonActionPerformed(evt);
            }
        });
        mapPanel.add(mapButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));

        mapWarningButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-box-important-22.png"))); // NOI18N
        mapWarningButton.setToolTipText("Nicht alle Orte konnten geokodiert werden");
        mapWarningButton.setBorder(null);
        mapWarningButton.setBorderPainted(false);
        mapWarningButton.setContentAreaFilled(false);
        mapWarningButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mapWarningButton.setMargin(new java.awt.Insets(2, 0, 2, 0));
        mapWarningButton.setMaximumSize(new java.awt.Dimension(21, 41));
        mapWarningButton.setMinimumSize(new java.awt.Dimension(21, 41));
        mapWarningButton.setPreferredSize(new java.awt.Dimension(21, 41));
        mapWarningButton.setVisible(false);
        mapWarningButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapWarningButtonActionPerformed(evt);
            }
        });
        mapPanel.add(mapWarningButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 8, 30, 30));

        visualizePanel.add(mapPanel);

        bottomPanel.add(visualizePanel, java.awt.BorderLayout.PAGE_END);

        contentPanel.add(bottomPanel, java.awt.BorderLayout.PAGE_END);

        mainPanel.add(contentPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        Runnable runner = new Runnable() {
            public void run() {
                statusLabel.setText("Tweets suchen");
                search(keywordField.getText(), 0);
            }
        };
        mainThread = new Thread(runner, "Search");

        mainThread.start();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void keywordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keywordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keywordFieldActionPerformed

    private void keywordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keywordFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchButtonActionPerformed(null);
        }
    }//GEN-LAST:event_keywordFieldKeyPressed

    private void analyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeButtonActionPerformed
        Runnable runner = new Runnable() {
            public void run() {
                statusLabel.setText("Tweets analysieren");
                analyze();
            }
        };
        mainThread = new Thread(runner, "Analysis");
        mainThread.start();
    }//GEN-LAST:event_analyzeButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed

        db = new Database();
        db.setLang(lang);

        NLP.reset();

        DefaultTableModel tableModel = (DefaultTableModel) resultTable.getModel();
        tableModel.setRowCount(0);

        if (mainThread != null) {
            mainThread.stop();
        }
        searchProgressBar.setVisible(false);
        searchProgressBar.setValue(0);
        analyzeProgressBar.setVisible(false);
        analyzeProgressBar.setValue(0);
        visualizeProgressBar.setVisible(false);
        visualizeProgressBar.setValue(0);

        resetButton.setVisible(false);
        resultScrollPane.setVisible(false);
        resumeButton.setVisible(false);
        suspendButton.setVisible(false);
        focusCheckBox.setVisible(false);
        chartButton.setVisible(false);
        mapPanel.setVisible(false);
        mapWarningButton.setVisible(false);
        wordCloudButton.setVisible(false);
        jSeparator.setVisible(false);
        visualizeButton.setVisible(true);
        visualizeButton.setEnabled(false);
        keywordField.setText("");
        setTitle("#Twitter-Datenanalyse");
        countLabel.setText("");
        analyzeButton.setEnabled(false);
        analyzeButton.setVisible(true);
        stageSearch = false;
        stageAnalyze = false;
        exportButton.setVisible(false);
        statisticButton.setVisible(false);
        jPanel4.setVisible(false);
        subdivideButton.setVisible(false);
        updateButton.setVisible(true);
        analyzedCount.setText("");
        sentimentSmiley.setText("");
        statusLabel.setText("");
        sentimentSmiley.setIcon(null);
        keywordField.setEditable(true);
        analyzePanel.setVisible(true);
        searchLabel.setVisible(true);
        keywordField.setVisible(false);
        searchFieldUnderline.setVisible(false);
        searchButton.setVisible(false);
        linkButton.setText("");
        linkButton.setVisible(false);
        importButton.setVisible(true);
        updateButton.setVisible(false);
        resultScrollPane.setVisible(false);


    }//GEN-LAST:event_resetButtonActionPerformed

    private void keywordFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keywordFieldMouseExited
        if (keywordField.getText().isEmpty()) {
            searchLabel.setVisible(true);
            keywordField.setVisible(false);
            searchFieldUnderline.setVisible(false);
            searchButton.setVisible(false);
        }
    }//GEN-LAST:event_keywordFieldMouseExited

    private void searchLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchLabelMouseEntered
        searchLabel.setVisible(false);
        keywordField.setVisible(true);
        searchFieldUnderline.setVisible(true);
        searchButton.setVisible(true);
    }//GEN-LAST:event_searchLabelMouseEntered

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        int returnVal = jFileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser.getSelectedFile();

            if (db != null) {
                try {
                    new FileHandler().marshall(db, file);

                } catch (JAXBException ex) {
                    System.out.println("problem accessing file" + file.getAbsolutePath());
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                System.out.println("File access cancelled by user.");
            }
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser.getSelectedFile();

            Runnable runner = new Runnable() {
                public void run() {

                    searchProgressBar.setVisible(true);
                    searchLabel.setVisible(true);
                    keywordField.setVisible(false);
                    searchFieldUnderline.setVisible(false);
                    searchButton.setVisible(false);
                    statusLabel.setText("Datei einlesen");
                    Database newDb = new FileHandler().unmarshall(file);

                    DefaultTableModel tableModel = (DefaultTableModel) resultTable.getModel();
                    tableModel.setRowCount(0);

                    boolean sameAnalyzeStatus = false;
                    boolean bothAnalyzed = false;
                    if ((newDb.getAnalyzedCount() == newDb.getTweets().size() && (db.getAnalyzedCount() == db.getTweets().size()))) {
                        sameAnalyzeStatus = true;
                        bothAnalyzed = true;
                    }
                    if (db.getAnalyzedCount() == 0 && newDb.getAnalyzedCount() == 0) {
                        sameAnalyzeStatus = true;
                    }
                    boolean sameLanguage = false;
                    if (db.getLang().equals(newDb.getLang()) && newDb.getTweets().size() > 0) {
                        sameLanguage = true;
                    }

                    boolean sameKeyword = false;
                    if (!db.getTweets().isEmpty() && newDb.getKeyword().toLowerCase().equals(db.getKeyword().toLowerCase())) {
                        sameKeyword = true;
                    }
                    if (DEBUG) {
                        System.out.println("sameAnalyzeStatus:" + sameAnalyzeStatus);
                        System.out.println("bothAnalyzed:" + bothAnalyzed);
                        System.out.println("sameLanguage:" + sameLanguage);
                        System.out.println("sameKeyword:" + sameKeyword);
                    }
                    if (sameLanguage) {
                        if (sameKeyword && sameAnalyzeStatus) {

                            int dialogResult1 = JOptionPane.showConfirmDialog(null, "Soll die bestehende Datenbank ergänzt werden?", "Importieren", JOptionPane.YES_NO_OPTION);
                            if (dialogResult1 == JOptionPane.YES_OPTION) {
                                db.getTweets().addAll(newDb.getTweets());

                                int dialogResult2 = JOptionPane.showConfirmDialog(null, "<html>Soll die Datenbank singularisiert werden?<br>(eventuell zeitaufwändig)</html>", "Importieren", JOptionPane.YES_NO_OPTION);
                                if (dialogResult2 == JOptionPane.YES_OPTION) {
                                    statusLabel.setText("Liste singularisieren");
                                    db.makeTweetsDistinct();
                                }
                            } else {
                                db = newDb;
                            }

                            statusLabel.setText("Liste sortieren");
                            db.sortTweets();

                            statusLabel.setText("Liste füllen");
                            updateTableModel();

                            exportButton.setVisible(true);

                            if (bothAnalyzed) {
                                enableAnalyzeStatus();
                                db.setSentenceCount(db.getSentenceCount() + newDb.getSentenceCount());
                                db.setWordCount(db.getWordCount() + newDb.getWordCount());
                                db.setAnalyzedCount(db.getAnalyzedCount() + newDb.getAnalyzedCount());

                                HashMap<Location, Integer> map = new HashMap<Location, Integer>();

                                map.putAll(db.getLocations());
                                for (Location location : newDb.getLocations().keySet()) {
                                    if (!map.containsKey(location)) {
                                        map.put(location, 1);
                                    } else {
                                        map.put(location, map.get(location) + 1);
                                    }
                                }
                                db.setLocations(map);
                                disableAnalyzeStatus();
                            }

                        } else {
                            if (db.getAnalyzedCount() == 0) {
                                importDatabase(newDb);
                            } else {
                                int dialogResult1 = JOptionPane.showConfirmDialog(null, "Suchbegriff oder Analysestatus der Datenbanken unterschiedlich.\n"
                                        + "Soll die bestehende Datenbank überschrieben werden?", "Importieren", JOptionPane.YES_NO_OPTION);
                                if (dialogResult1 == JOptionPane.YES_OPTION) {
                                    importDatabase(newDb);
                                } else {
                                    updateTableModel();
                                }
                            }
                        }

                        if (db.isLocationsComplete()) {
                            mapWarningButton.setVisible(false);
                        } else {
                            mapWarningButton.setVisible(true);
                        }

                        keywordField.setText(db.getTitle(false));
                        setTitle("#Twitter-Datenanalyse - " + db.getKeyword());
                        keywordField.setEditable(false);
                        searchProgressBar.setVisible(false);
                        searchLabel.setVisible(false);
                        keywordField.setVisible(true);
                        searchFieldUnderline.setVisible(true);
                        searchButton.setVisible(true);

                    } else {
                        statusLabel.setText("");
                        searchProgressBar.setVisible(false);
                        JOptionPane.showMessageDialog(mainPanel, "Diskrepanz der Sprachen " + language(newDb.getLang()) + " (importierte DB) und " + language(db.getLang()) + " (bestehende DB). Datenbank kann nicht importiert werden.");
                    }
                }
            };
            mainThread = new Thread(runner, "Import");
            mainThread.start();
        } else {
            System.out.println("File access cancelled by user.");
        }


    }//GEN-LAST:event_importButtonActionPerformed

    private void importDatabase(Database newDb) {
        db = newDb;
        statusLabel.setText("Liste füllen");
        updateTableModel();

        NLP.reset();

        if (db.getAnalyzedCount() >= db.getTweets().size()) {
            enableAnalyzeStatus();
            NLP.setAnalyzedSentences(db.getSentenceCount());
            NLP.setAnalyzedWords(db.getWordCount());
//                                NLP.setKeywords(db.getTags());

            disableAnalyzeStatus();
        } else {
            analyzePanel.setVisible(true);
            analyzedCount.setText("");
            analyzeButton.setVisible(true);
            stageAnalyze = false;
            visualizeButton.setEnabled(false);
            sentimentSmiley.setVisible(false);
        }
    }
    private void mapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapButtonActionPerformed

        Object[] possibilities = {0.01, 0.05, 0.1, 0.2, 0.4, 0.6, 0.9};
        Double i = (Double) JOptionPane.showInputDialog(mainPanel,
                "<html>Wie stark sollen die Gewichtungen der Orte geglättet werden?<br>(<i>0.01 = maximal, 0.9 = minimal</i>)</html>", "HeatMap",
                JOptionPane.PLAIN_MESSAGE, null, possibilities, "Numbers");
        if (i != null) {

            if (Desktop.isDesktopSupported()) {
                HashMap<Location, Integer> locations;
                if (DEBUG) {
                    locations = db.getLocationsSorted();
                } else {
                    locations = db.getLocations();
                }
                if (!locations.isEmpty()) {
                    File hm = new HeatMapBuilder(db.getKeyword(), locations, i).create();
                    hm.deleteOnExit();
                    try {
                        try {
                            Desktop.getDesktop().browse(new URI(hm.getPath()));

                        } catch (IOException ex) {
                            Logger.getLogger(GUI.class
                                    .getName()).log(Level.SEVERE, null, ex);

                        }
                    } catch (URISyntaxException ex) {
                        Logger.getLogger(GUI.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(mainPanel, "Keine Positionsangaben vorhanden.");
                }
            } else {
                JOptionPane.showMessageDialog(mainPanel, "Desktop wurde nicht gefunden.");
            }
        }
    }//GEN-LAST:event_mapButtonActionPerformed

    private void visualizeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_visualizeButtonMouseEntered
        if (visualizeButton.isVisible() && visualizeButton.isEnabled()) {
            chartButton.setVisible(true);
            mapPanel.setVisible(true);
            wordCloudButton.setVisible(true);
            jSeparator.setVisible(true);
            visualizeButton.setVisible(false);
        }
    }//GEN-LAST:event_visualizeButtonMouseEntered

    private void wordCloudButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordCloudButtonActionPerformed
        Object[] possibilities = {5, 10, 15, 20, 25, 30, 40, 50, 60, 80, 100};
        Integer i = (Integer) JOptionPane.showInputDialog(mainPanel,
                "Wieviele Einträge sollen angezeigt werden?", "WordCloud",
                JOptionPane.PLAIN_MESSAGE, null, possibilities, "Numbers");
        if ((i != null) && (i > 0)) {
            if (Desktop.isDesktopSupported()) {
                File hm = null;

                try {
                    hm = new WordCloudBuilder(db.getKeyword(), db.getTopAnalyzedTagsSizeWeighted(i + 1)).create();
                    hm.deleteOnExit();

                } catch (IOException ex) {
                    Logger.getLogger(GUI.class
                            .getName()).log(Level.SEVERE, null, ex);

                } catch (URISyntaxException ex) {
                    Logger.getLogger(GUI.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

                try {
                    try {
                        Desktop.getDesktop().browse(new URI(hm.getPath()));

                    } catch (IOException ex) {
                        Logger.getLogger(GUI.class
                                .getName()).log(Level.SEVERE, null, ex);

                    }
                } catch (URISyntaxException ex) {
                    Logger.getLogger(GUI.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                System.out.println("Desktop not found!");
            }
        }
    }//GEN-LAST:event_wordCloudButtonActionPerformed

    private void linkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkButtonActionPerformed
        if (Desktop.isDesktopSupported()) {
            Tweet h = db.getTweets().get(resultTable.convertRowIndexToModel(resultTable.getSelectedRow()));
            String link = "https://twitter.com/" + h.getUser() + "/status/" + h.getId();
            try {
                Desktop.getDesktop().browse(new URI(link));

            } catch (URISyntaxException ex) {
                Logger.getLogger(GUI.class
                        .getName()).log(Level.SEVERE, null, ex);
            } catch (IOException e) {
                /* TODO: error handling */ }
        } else {
            System.out.println("Desktop not found!");
        }
    }//GEN-LAST:event_linkButtonActionPerformed

    private void chartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chartButtonActionPerformed

        Object[] possibilities = {5, 10, 15, 20, 25, 30, 40, 50, 60, 80, 100, 200};
        Integer i = (Integer) JOptionPane.showInputDialog(mainPanel,
                "Wieviele Einträge sollen angezeigt werden?", "Diagramm",
                JOptionPane.QUESTION_MESSAGE, null, possibilities, "Numbers");

        if ((i != null) && (i > 0)) {
            Integer j = (Integer) JOptionPane.showConfirmDialog(mainPanel, "<html>Soll die <font color=orange>"
                    + "Anzahl Tweets zu identifizierten Schlagworten</font> neben der<br>"
                    + "<font color=green>Anzahl identifizierter Schlagwortnennungen</font> "
                    + "angezeigt werden?<br>(eventuell zeitaufwändig)</html>", "Diagramm", JOptionPane.YES_NO_OPTION);

            if (Desktop.isDesktopSupported()) {
                File hm = null;
                try {
                    LinkedHashMap<String, Long> topAnalyzedTagsWeighted = db.getTopAnalyzedTagsSizeWeighted(i + 1);
                    LinkedHashMap<String, Long> topOverallTagsWeighted = null;

                    if (j == JOptionPane.YES_OPTION) {
                        topOverallTagsWeighted = db.getTopTweetsToFilteredTagsWeighted(topAnalyzedTagsWeighted);
                    }

                    hm = new SingleLineChart(db, topAnalyzedTagsWeighted, topOverallTagsWeighted).create();
                    hm.deleteOnExit();

                } catch (IOException ex) {
                    Logger.getLogger(GUI.class
                            .getName()).log(Level.SEVERE, null, ex);

                } catch (URISyntaxException ex) {
                    Logger.getLogger(GUI.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

                try {
                    try {
                        Desktop.getDesktop().browse(new URI(hm.getPath()));

                    } catch (IOException ex) {
                        Logger.getLogger(GUI.class
                                .getName()).log(Level.SEVERE, null, ex);

                    }
                } catch (URISyntaxException ex) {
                    Logger.getLogger(GUI.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                System.out.println("Desktop not found!");
            }
        }
    }//GEN-LAST:event_chartButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        Tweet mostRecentTweet = db.getTweets().get(0);
        long DAY_IN_MS = 1000 * 60 * 60 * 24;
        int dayTimeHorizon = 7;

        if (!mostRecentTweet.getDate().after(new Date(System.currentTimeMillis() - (dayTimeHorizon * DAY_IN_MS)))) {
            JOptionPane.showMessageDialog(mainPanel, "<html>Tweets älter als " + dayTimeHorizon
                    + " Tage werden von Twitter teilweise archiviert und sind nicht weiter verfügbar.<br>Kurz: "
                    + "<font color=red>Die Datenbank kann nach der Aktualisierung unvollständig sein!</font></html>");
        }
        Runnable runner = new Runnable() {
            public void run() {
                stageSearch = false;

                TweetManager.MAX_QUERIES = 1000;

                String keyword = db.getKeyword();

                statusLabel.setText("Neue Tweets suchen");
                search(keyword, mostRecentTweet.getId());

//                statusLabel.setText("Liste singularisieren");
//                db.makeTweetsDistinct();
//                statusLabel.setText("Liste füllen");
//                updateTableModel();
            }
        };
        mainThread = new Thread(runner, "Updating");
        mainThread.start();

    }//GEN-LAST:event_updateButtonActionPerformed

    private void resultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseClicked
        if (stageSearch) {
            if (resultTable.getSelectedRow() != -1 && resultTable.getSelectedColumn() != -1) {
                linkButton.setVisible(true);
                Tweet h = db.getTweets().get(resultTable.convertRowIndexToModel(resultTable.getSelectedRow()));
                if (resultTable.getSelectedColumn() == 0) {
                    filterField.setText(new SimpleDateFormat("E. dd.MM.yy").format(h.getDate()).toString());
                    filter(0);
                    linkButton.setVisible(false);
                } else if (resultTable.getSelectedColumn() == 1) {
                    filterField.setText(h.getUser());
                    filter(1);
                    linkButton.setVisible(false);
                } else {
                    linkButton.setText("https://twitter.com/" + h.getUser() + "/status/" + h.getId());
                    linkButton.setVisible(true);
                }
            } else {
                linkButton.setVisible(false);
            }
        }
    }//GEN-LAST:event_resultTableMouseClicked

    private void linkButtonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_linkButtonFocusLost
        linkButton.setVisible(false);
    }//GEN-LAST:event_linkButtonFocusLost

    private void suspendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suspendButtonActionPerformed
        mainThread.suspend();
        suspendButton.setVisible(false);
        focusCheckBox.setVisible(false);
        resumeButton.setVisible(true);
    }//GEN-LAST:event_suspendButtonActionPerformed

    private void resumeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resumeButtonActionPerformed
        mainThread.resume();
        resumeButton.setVisible(false);
        suspendButton.setVisible(true);
        focusCheckBox.setVisible(true);
    }//GEN-LAST:event_resumeButtonActionPerformed

    private void subdivideButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subdivideButtonActionPerformed

        DefaultTableModel tableModel = (DefaultTableModel) resultTable.getModel();
        int result = JOptionPane.showConfirmDialog(mainPanel, "Hiermit werden alle herausgefilterten Tweets aus der lokalen Datenbank entfernt.", "Unterteilen", JOptionPane.WARNING_MESSAGE);
        if (result == JOptionPane.OK_OPTION) {
            Runnable runner = new Runnable() {
                public void run() {
                    List<Tweet> filteredList = new ArrayList<Tweet>();
                    List<Tweet> unfilteredList = db.getTweets();

                    for (int i = 0; i < resultTable.getRowCount(); i++) {
                        filteredList.add(unfilteredList.get(resultTable.convertRowIndexToModel(i)));
                    }
                    db.setTweets(filteredList);
                    db.updateAnalyzedCount();
                    db.setSentenceCount(0);
                    db.setWordCount(0);
                    db.addFilter(filterField.getText().trim());

                    keywordField.setEditable(false);
                    keywordField.setText(db.getTitle(false));
                    filterField.setText("Filtern");
                    filterLine.setVisible(false);
                    filterField.setFocusable(false);
                    filterField.setFocusable(true);

                    tableModel.setRowCount(0);

                    statusLabel.setText("Liste füllen");
                    updateTableModel();
                    updateSentimentLabel(db.getSentiment());
                    analyzedCount.setText(nf.format(db.getTweets().size()) + " Tweets | " + nf.format(db.getTagsDistinct().size()) + " Schlagworte");

                    subdivideButton.setVisible(false);
                }
            };
            mainThread = new Thread(runner, "Subdividing Database");
            mainThread.start();
        }
    }//GEN-LAST:event_subdivideButtonActionPerformed


    private void filterFieldMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterFieldMouseEntered
        if (filterField.getText().equals("Filtern")) {
            filterField.setText("");
            filterLine.setVisible(true);
        }
    }//GEN-LAST:event_filterFieldMouseEntered

    private void filterFieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterFieldMouseExited
        if (filterField.getText().equals("")) {
            filterField.setText("Filtern");
            filterLine.setVisible(false);
            filterField.setFocusable(false);
            filterField.setFocusable(true);
            statusLabel.setText("");
            subdivideButton.setVisible(false);
        }
    }//GEN-LAST:event_filterFieldMouseExited

    private void filterFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterFieldKeyPressed
        if (filterField.getText().equals("Filtern")) {
            filterField.setText("");
            filterLine.setVisible(true);
        }
    }//GEN-LAST:event_filterFieldKeyPressed

    private void filterFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filterFieldFocusLost
        if (filterField.getText().equals("")) {
            filterField.setText("Filtern");
            filterLine.setVisible(false);
            filterField.setFocusable(false);
            filterField.setFocusable(true);
            statusLabel.setText("");
            subdivideButton.setVisible(false);
        }
    }//GEN-LAST:event_filterFieldFocusLost

    private void clearFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFilterButtonActionPerformed
        TableRowSorter<TableModel> tr = new TableRowSorter<TableModel>(resultTable.getModel());
        resultTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(""));
        filterField.setText("Filtern");
        filterLine.setVisible(false);
        filterField.setFocusable(false);
        filterField.setFocusable(true);
        statusLabel.setText("");
        subdivideButton.setVisible(false);
    }//GEN-LAST:event_clearFilterButtonActionPerformed

    private void statisticButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statisticButtonActionPerformed
        if (Desktop.isDesktopSupported()) {
            File hm = null;
            try {
                hm = new DateChart(db).create();
                hm.deleteOnExit();

            } catch (IOException ex) {
                Logger.getLogger(GUI.class
                        .getName()).log(Level.SEVERE, null, ex);

            } catch (URISyntaxException ex) {
                Logger.getLogger(GUI.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

            try {
                try {
                    Desktop.getDesktop().browse(new URI(hm.getPath()));

                } catch (IOException ex) {
                    Logger.getLogger(GUI.class
                            .getName()).log(Level.SEVERE, null, ex);

                }
            } catch (URISyntaxException ex) {
                Logger.getLogger(GUI.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_statisticButtonActionPerformed


    private void infoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButtonActionPerformed
        new Info().setVisible(true);
    }//GEN-LAST:event_infoButtonActionPerformed

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        JFrame start = new Start();
        start.setVisible(true);
        dispose();
    }//GEN-LAST:event_settingsButtonActionPerformed


    private void filterFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterFieldKeyReleased
// WOW die Anwendung kann sich echt mit dem Filtern aufhängen =/
// Deshalb Timer, der Tastaturschläge abwartet
        final int timeToWait = 3500;
        mainTimer = null;
        mainTimer = new Timer(timeToWait, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                filter(2);
            }

        });
        mainTimer.setRepeats(false);
        mainTimer.start();


    }//GEN-LAST:event_filterFieldKeyReleased

    public void updateWarningButton(boolean complete) {

        if (complete) {
            mapWarningButton.setEnabled(false);
            db.completeLocations();
        }
        java.util.Timer t = new java.util.Timer();
        TimerTask tt = new TimerTask() {
            @Override
            public void run() {
                if (db.isLocationsComplete()) {
                    mapWarningButton.setVisible(false);

                } else if (db.threadsAlive()) {
                    mapWarningButton.setEnabled(false);
                    mapWarningButton.setVisible(true);
                } else {
                    mapWarningButton.setEnabled(true);
                    mapWarningButton.setVisible(true);
                    this.cancel();
                }
                mapWarningButton.setToolTipText(nf.format(db.getCompletedLocationsCount()) + " von " + nf.format(db.getLocations().size()) + " Orten geokodiert");
            }
        };
        t.scheduleAtFixedRate(tt, 3000, 3000);
        if (!db.isLocationsComplete()) {
            mapWarningButton.setEnabled(true);
        }
    }

    private void mapWarningButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapWarningButtonActionPerformed
        updateWarningButton(true);

    }//GEN-LAST:event_mapWarningButtonActionPerformed

    private void filterFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filterFieldFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_filterFieldFocusGained

    //--------------------------------------------------------------------------
    private void search(String term, long sinceId) {
        if (!term.equals("") && !term.equals("Suchen") && !stageSearch) {

            String keyword;

            keywordField.setEditable(false);

            if (term.contains(":")) {
                String[] commands = term.split(":");
                keyword = commands[0];
                keywordField.setText(keyword);

                if (commands[1].matches("[0-9]+")) {
                    TweetManager.MAX_QUERIES = Integer.parseInt(commands[1]);
                }
            } else {
                keyword = term;
            }

            db.setKeyword(keyword);
            db.setLang(lang);

            setTitle("#Twitter-Datenanalyse - " + db.getKeyword());
            importButton.setVisible(false);
            exportButton.setVisible(false);
            updateButton.setVisible(false);
            subdivideButton.setVisible(false);
            resetButton.setVisible(false);
            jPanel4.setVisible(false);

            analyzeButton.setEnabled(false);
            settingsButton.setEnabled(false);

            searchProgressBar.setVisible(true);
            resultScrollPane.setVisible(true);

            //--------------------------
            if (!db.getTweets().isEmpty()) {
                db.getTweets().addAll(TweetManager.search(keyword, lang, sinceId, this));
                db.sortTweets();
            } else {
                db.setTweets(TweetManager.search(keyword, lang, sinceId, this));
            }
            //--------------------------
            if (db.getTweets().size() > 0) {
                stageSearch = true;
                updateCount();

                if (db.getAnalyzedCount() == 0) {
                    updateButton.setVisible(true);
                }
                exportButton.setVisible(true);
                statisticButton.setVisible(true);
                jPanel4.setVisible(true);
                importButton.setVisible(true);
                updateButton.setVisible(true);
                resetButton.setVisible(true);
                analyzeButton.setEnabled(true);
                settingsButton.setEnabled(true);
            }
            searchProgressBar.setVisible(false);
            statusLabel.setText("");
        }
    }

//    private Thread filterThread;
    private void filter(int filterByColumn) {
//        if (filterThread != null) {
//            if (filterThread.isAlive()) {
//                filterThread.stop();
//            }
//        }
//
//        Runnable runner = new Runnable() {
//            public void run() {

        String text = filterField.getText();
        filterLine.setVisible(true);
        TableRowSorter<TableModel> tr = new TableRowSorter<TableModel>(resultTable.getModel());
        resultTable.setRowSorter(tr);

//FUNKTIONIERT NICHT, WEIL SPALTE 0 KEIN DATE SONDERN STRING IST (NACH DATEFORMAT) --> ALSO ENTWEDER FORMATTIERTES DATUM ODER MÖGLICHKEIT ZUR EINGRENZUNG ZWEIER DATEN - KEINE LÖSUNG!!!
//        Matcher DateChars = Pattern.compile("([0-9]{2}[\\.]{1}[0-9]{2}[\\.]{1}[0-9]{2})-([0-9]{2}[\\.]{1}[0-9]{2}[\\.]{1}[0-9]{2})").matcher(text);
//        if (DateChars.matches()) {
//            DateFormat format = new SimpleDateFormat("dd.MM.yy");
//            try {
//                Date after = format.parse(DateChars.group(1));
//                System.out.println(after);
//                Date before = format.parse(DateChars.group(2));
//                System.out.println(before);
//
//                List<RowFilter<Object, Object>> filters = new ArrayList<RowFilter<Object, Object>>(2);
//                filters.add(RowFilter.dateFilter(RowFilter.ComparisonType.AFTER, after));
//                filters.add(RowFilter.dateFilter(RowFilter.ComparisonType.BEFORE, before));
//                RowFilter rf = RowFilter.andFilter(filters);
//                tr.setRowFilter(rf);
//
//            } catch (ParseException ex) {
//                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        } else 
        String[] filterWordArray;
        boolean and = false;
        if (text.contains("&")) {
            filterWordArray = text.split("&");
            and = true;
        } else if (text.contains(",")) {
            filterWordArray = text.split(",");
        } else {
            filterWordArray = new String[1];
            filterWordArray[0] = text;
        }
        ArrayList<String> filterWordList = new ArrayList<>(Arrays.asList(filterWordArray));
        List<RowFilter<Object, Object>> filters = new ArrayList<RowFilter<Object, Object>>(filterWordList.size());

        //" electric car " zu "electric car" und "electriccar"
        final int size = filterWordList.size();
        for (int i = 0; i < filterWordList.size(); i++) {
            filterWordList.set(i, filterWordList.get(i).trim());
            if (!and) {
                if (filterWordList.get(i).contains(" ")) {
                    filterWordList.add(filterWordList.get(i).replaceAll(" ", ""));
                }
                if (filterWordList.get(i).contains("-") && !filterWordList.get(i).startsWith("-")) {
                    filterWordList.add(filterWordList.get(i).replaceAll("-", ""));
                }
            }
        }

        for (int i = 0; i < filterWordList.size(); i++) {
            if (filterWordList.get(i).startsWith("-")) {
                filters.add(RowFilter.notFilter(RowFilter.regexFilter("(?i)" + filterWordList.get(i).substring(1), filterByColumn)));
            } else if (filterWordList.get(i).startsWith("!")) {
                filters.add(RowFilter.regexFilter(filterWordList.get(i).substring(1), filterByColumn));
            } else {
                filters.add(RowFilter.regexFilter("(?i)" + filterWordList.get(i), filterByColumn));
            }
        }
        if (and) {
            tr.setRowFilter(RowFilter.andFilter(filters));
        } else {
            tr.setRowFilter(RowFilter.orFilter(filters));
        }
        boolean visible = false;
        if (filterField.getText().isEmpty()) {
            statusLabel.setText("");

        } else if (resultTable.getRowCount() < db.getTweets().size()) {
            statusLabel.setText(nf.format(resultTable.getRowCount()) + " Tweets gefiltert");
            visible = true;
        }
        subdivideButton.setVisible(visible);

//            }
//        };
//        filterThread = new Thread(runner, filterField.getText() + " Filter");
//        filterThread.start();
    }

    public Database getDB() {
        return db;
    }

    public JTable getResultTable() {
        return resultTable;
    }

    public void setStatusLabel(String text) {
        statusLabel.setText(text);
    }

    public void openMessageDialog(String text) {
        JOptionPane.showMessageDialog(mainPanel, text);
    }

    public void setCountLabel(String text) {
        countLabel.setText(text);
    }

    private void updateTableModel() {

        DefaultTableModel tableModel = (DefaultTableModel) resultTable.getModel();
        resultTable.setRowSorter(null);
        int size = db.getTweets().size();

        if (db.getAnalyzedCount() > 0) {
            for (int i = 0; i < size; i++) {
                Tweet tweet = db.getTweets().get(i);
                tableModel.addRow(new Object[]{df.format(tweet.getDate()), tweet.getUser(), tweet.getText()});
            }
        } else {
            for (int i = 0; i < size; i++) {
                Tweet tweet = db.getTweets().get(i);
                tableModel.addRow(new Object[]{df.format(tweet.getDate()), tweet.getUser(), "<html>" + tweet.getText() + "</html>"});
            }
        }
        resultTable.setRowSorter(null);
        resultTable.setModel(tableModel);

        if (tableModel.getRowCount() > 0 && !db.getTweets().isEmpty()) {
            stageSearch = true;
            analyzeButton.setEnabled(true);
            resetButton.setVisible(true);
            statisticButton.setVisible(true);
            exportButton.setVisible(true);

            jPanel4.setVisible(true);

            if (db.getAnalyzedCount() == 0) {
                updateButton.setVisible(true);
            }

            resultScrollPane.setVisible(true);

            statusLabel.setText("");
            updateCount();
        } else {
            resetButtonActionPerformed(null);
            statusLabel.setText("Keine Tweets vorhanden");
        }
    }

    private void analyze() {

        if (stageSearch && !stageAnalyze) {

            enableAnalyzeStatus();

            DefaultTableModel tableModel = (DefaultTableModel) resultTable.getModel();

            List<Tweet> tweets = db.getTweets();

            for (int k = db.getAnalyzedCount(); k < db.getTweets().size(); k++) {
                tweets.get(k).analyze();
                db.setAnalyzedCount(k);
                //Tabellen Update
                tableModel.setValueAt(tweets.get(k).getText(), k, 2);
                if (focusCheckBox.isSelected()) {
                    resultTable.scrollRectToVisible(resultTable.getCellRect(k, 0, true));
                }
                analyzeProgressBar.setValue(k);
                statusLabel.setText(k + " Tweets analysiert");
            }
            db.setAnalyzedCount(db.getAnalyzedCount() + 1);

            db.setSentenceCount(NLP.getAnalyzedSentenceCount());
            db.setWordCount(NLP.getAnalyzedWordCount());
            db.setLocations(NLP.getRawLocationsMap());
            if (db.getLocations().size() < 100) {
                db.completeLocations();
            }

            analyzedCount.setText("Wir haben " + nf.format(db.getTweets().size()) + " Tweets mit " + nf.format(db.getSentenceCount()) + " Sätzen und insgesamt " + nf.format(db.getWordCount()) + " Wörtern ausgewertet.");

            //--------------------------
            disableAnalyzeStatus();
        }

    }

    private void enableAnalyzeStatus() {
        clearFilterButtonActionPerformed(null);
        stageAnalyze = true;
        linkButton.setVisible(false);
        linkButton.setText("");
        importButton.setVisible(false);
        analyzeButton.setVisible(false);
        analyzeProgressBar.setMaximum(db.getTweets().size());
        analyzeProgressBar.setVisible(true);
        suspendButton.setVisible(true);
        focusCheckBox.setVisible(true);
        updateButton.setVisible(false);
        resetButton.setVisible(false);
        settingsButton.setEnabled(false);
    }

    private void disableAnalyzeStatus() {
        analyzeProgressBar.setValue(0);
        analyzeProgressBar.setVisible(false);
        suspendButton.setVisible(false);
        focusCheckBox.setVisible(false);
        exportButton.setVisible(true);
        importButton.setVisible(true);
        analyzePanel.setVisible(false);

        String locationCount = nf.format(db.getLocations().size());
        String info = nf.format(db.getTweets().size()) + " Tweets | ";
        if (db.getWordCount() > 0 && db.getSentenceCount() > 0) {
            info += nf.format(db.getSentenceCount()) + " Sätze | " + nf.format(db.getWordCount()) + " Worte | ";
        }
        info += nf.format(db.getTagsDistinct().size()) + " Schlagworte";
        if (db.getWordCount() > 0 && db.getSentenceCount() > 0) {
            info += " | " + locationCount + " Orte | " + nf.format(db.getAbsoluteLocationsCount()) + " Ortsnennungen";
        }

        analyzedCount.setText(info);
        mapWarningButton.setToolTipText(nf.format(db.getCompletedLocationsCount()) + " von " + locationCount + " Orten geokodiert");

        updateSentimentLabel(db.getSentiment());
        visualizeButton.setEnabled(true);
        resetButton.setVisible(true);
        settingsButton.setEnabled(true);

        DefaultTableModel tableModel = (DefaultTableModel) resultTable.getModel();

        updateWarningButton(false);

        if (tableModel.getRowCount() > 0 && !db.getTweets().isEmpty()) {
            visualizeButton.setEnabled(true);
            resultScrollPane.setVisible(true);
            statusLabel.setText("");

        } else {
            resetButtonActionPerformed(null);
            statusLabel.setText("Keine Tweets vorhanden");
        }
    }

    //--------------------------------------------------------------------------
    private void updateSentimentLabel(double sentiment) {

        String out = "Stimmung: ";

        if (lang.equals("de")) {
            sentiment *= 1.5;
        }
//        if (lang.equals("en")) {
//            sentiment *= 1.1;
//        }
        double roundedSentiment = new BigDecimal(sentiment).setScale(2, RoundingMode.HALF_UP).doubleValue();

        sentimentSmiley.setVisible(true);

        if (sentiment > 3.5) {
            sentimentSmiley.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-LOL-64.png")));
            out += "Freudig";
        } else if (sentiment > 2.5) {
            sentimentSmiley.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Happy-64.png")));
            out += "Positiv";
        } else if (sentiment > 1.5) {
            sentimentSmiley.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Neutral-64.png")));
            out += "Neutral";
//        } else if (sentiment > 1) {
//            sentimentSmiley.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Question-64.png")));
//            out += "Uneindeutig";
        } else {
            sentimentSmiley.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/icons8-Sad-64.png")));
            out += "Negativ";
        }
        out += "(" + roundedSentiment + ")";
        sentimentSmiley.setText(out);
    }

    public String language(String lang) {
        if (lang.equals("de")) {
            return "Deutsch";
        }
        if (lang.equals("en")) {
            return "Englisch";
        }
        return "";
    }

    public void updateCount() {

        countLabel.setText("DB: " + nf.format(db.getTweets().size()) + " Tweets");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel SearchFieldLabel;
    private javax.swing.JButton analyzeButton;
    private javax.swing.JPanel analyzePanel;
    private javax.swing.JProgressBar analyzeProgressBar;
    private java.awt.Panel analyzeResultPanel;
    private javax.swing.JLabel analyzedCount;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton chartButton;
    private javax.swing.JButton clearFilterButton;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JLabel countLabel;
    private javax.swing.JButton exportButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JTextField filterField;
    private javax.swing.JSeparator filterLine;
    private javax.swing.JCheckBox focusCheckBox;
    private javax.swing.JButton importButton;
    private javax.swing.JButton infoButton;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JTextField keywordField;
    private javax.swing.JButton linkButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton mapButton;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JToggleButton mapWarningButton;
    private javax.swing.JPanel middlePanel;
    private javax.swing.JButton resetButton;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JTable resultTable;
    private javax.swing.JButton resumeButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchButtonPanel;
    private javax.swing.JSeparator searchFieldUnderline;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JProgressBar searchProgressBar;
    private javax.swing.JLabel sentimentSmiley;
    private javax.swing.JButton settingsButton;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JButton statisticButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton subdivideButton;
    private javax.swing.JButton suspendButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton visualizeButton;
    private javax.swing.JPanel visualizePanel;
    private javax.swing.JProgressBar visualizeProgressBar;
    private javax.swing.JButton wordCloudButton;
    // End of variables declaration//GEN-END:variables
}
